"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._getIdMetadata = exports._coerceToDict = exports.getNewChannelVersions = exports.getNullChannelVersion = void 0;
function getNullChannelVersion(currentVersions) {
    const versionValues = Object.values(currentVersions);
    const versionType = versionValues.length > 0 ? typeof versionValues[0] : undefined;
    let nullVersion;
    if (versionType === "number") {
        nullVersion = 0;
    }
    else if (versionType === "string") {
        nullVersion = "";
    }
    return nullVersion;
}
exports.getNullChannelVersion = getNullChannelVersion;
function getNewChannelVersions(previousVersions, currentVersions) {
    // Get new channel versions
    if (Object.keys(previousVersions).length > 0) {
        const nullVersion = getNullChannelVersion(currentVersions);
        return Object.fromEntries(Object.entries(currentVersions).filter(([k, v]) => v > (previousVersions[k] ?? nullVersion)));
    }
    else {
        return currentVersions;
    }
}
exports.getNewChannelVersions = getNewChannelVersions;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _coerceToDict(value, defaultKey) {
    return value &&
        !Array.isArray(value) &&
        // eslint-disable-next-line no-instanceof/no-instanceof
        !(value instanceof Date) &&
        typeof value === "object"
        ? value
        : { [defaultKey]: value };
}
exports._coerceToDict = _coerceToDict;
// Order matters
function _getIdMetadata(metadata) {
    return {
        langgraph_step: metadata.langgraph_step,
        langgraph_node: metadata.langgraph_node,
        langgraph_triggers: metadata.langgraph_triggers,
        langgraph_task_idx: metadata.langgraph_task_idx,
    };
}
exports._getIdMetadata = _getIdMetadata;
