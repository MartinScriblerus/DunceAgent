"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PregelLoop = void 0;
const double_ended_queue_1 = __importDefault(require("double-ended-queue"));
const langgraph_checkpoint_1 = require("@langchain/langgraph-checkpoint");
const base_js_1 = require("../channels/base.cjs");
const constants_js_1 = require("../constants.cjs");
const algo_js_1 = require("./algo.cjs");
const utils_js_1 = require("../utils.cjs");
const io_js_1 = require("./io.cjs");
const errors_js_1 = require("../errors.cjs");
const utils_js_2 = require("./utils.cjs");
const debug_js_1 = require("./debug.cjs");
const INPUT_DONE = Symbol.for("INPUT_DONE");
const INPUT_RESUMING = Symbol.for("INPUT_RESUMING");
const DEFAULT_LOOP_LIMIT = 25;
class PregelLoop {
    get backgroundTasksPromise() {
        return this._putCheckpointPromise;
    }
    constructor(params) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.defineProperty(this, "input", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpointer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpointerGetNextVersion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // TODO: Fix typing
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "channels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpointConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpointMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkpointPendingWrites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "checkpointPreviousVersions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "step", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "stop", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "pending"
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.defineProperty(this, "tasks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.defineProperty(this, "stream", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new double_ended_queue_1.default()
        });
        Object.defineProperty(this, "isNested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_putCheckpointPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Promise.resolve()
        });
        Object.defineProperty(this, "outputKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "streamKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onBackgroundError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.input = params.input;
        this.config = params.config;
        this.checkpointer = params.checkpointer;
        // TODO: if managed values no longer needs graph we can replace with
        // managed_specs, channel_specs
        if (this.checkpointer !== undefined) {
            this.checkpointerGetNextVersion = this.checkpointer.getNextVersion.bind(this.checkpointer);
        }
        else {
            this.checkpointerGetNextVersion = algo_js_1.increment;
        }
        this.graph = params.graph;
        this.checkpoint = params.checkpoint;
        this.checkpointConfig = params.checkpointConfig;
        this.checkpointMetadata = params.checkpointMetadata;
        this.checkpointPreviousVersions = params.checkpointPreviousVersions;
        this.channels = params.channels;
        this.checkpointPendingWrites = params.checkpointPendingWrites;
        this.step = params.step;
        this.stop = params.stop;
        this.isNested = constants_js_1.CONFIG_KEY_READ in (this.config.configurable ?? {});
        this.outputKeys = params.outputKeys;
        this.streamKeys = params.streamKeys;
        this.onBackgroundError = params.onBackgroundError;
    }
    static async initialize(params) {
        const saved = (await params.checkpointer?.getTuple(params.config)) ?? {
            config: params.config,
            checkpoint: (0, langgraph_checkpoint_1.emptyCheckpoint)(),
            metadata: {
                source: "input",
                step: -2,
                writes: null,
            },
            pendingWrites: [],
        };
        const checkpointConfig = {
            ...params.config,
            ...saved.config,
            configurable: {
                ...params.config.configurable,
                ...saved.config.configurable,
            },
        };
        const checkpoint = (0, langgraph_checkpoint_1.copyCheckpoint)(saved.checkpoint);
        const checkpointMetadata = { ...saved.metadata };
        const checkpointPendingWrites = saved.pendingWrites ?? [];
        const channels = (0, base_js_1.emptyChannels)(params.graph.channels, checkpoint);
        const step = (checkpointMetadata.step ?? 0) + 1;
        const stop = step + (params.config.recursionLimit ?? DEFAULT_LOOP_LIMIT) + 1;
        const checkpointPreviousVersions = { ...checkpoint.channel_versions };
        return new PregelLoop({
            input: params.input,
            config: params.config,
            checkpointer: params.checkpointer,
            graph: params.graph,
            checkpoint,
            checkpointMetadata,
            checkpointConfig,
            channels,
            step,
            stop,
            checkpointPreviousVersions,
            checkpointPendingWrites,
            outputKeys: params.outputKeys,
            streamKeys: params.streamKeys,
            onBackgroundError: params.onBackgroundError,
        });
    }
    async _checkpointerPutAfterPrevious(input) {
        try {
            await this._putCheckpointPromise;
        }
        finally {
            this._putCheckpointPromise =
                this.checkpointer
                    ?.put(input.config, input.checkpoint, input.metadata, input.newVersions)
                    .catch(this.onBackgroundError) ?? Promise.resolve();
        }
    }
    /**
     * Put writes for a task, to be read by the next tick.
     * @param taskId
     * @param writes
     */
    putWrites(taskId, writes) {
        const pendingWrites = writes.map(([key, value]) => {
            return [taskId, key, value];
        });
        this.checkpointPendingWrites.push(...pendingWrites);
        if (this.checkpointer !== undefined) {
            void this.checkpointer
                .putWrites({
                ...this.checkpointConfig,
                configurable: {
                    ...this.checkpointConfig.configurable,
                    checkpoint_ns: this.config.configurable?.checkpoint_ns ?? "",
                    checkpoint_id: this.checkpoint.id,
                },
            }, writes, taskId)
                .catch(this.onBackgroundError);
        }
        const task = this.tasks.find((task) => task.id === taskId);
        if (task !== undefined) {
            this.stream.push(...(0, utils_js_1.gatherIteratorSync)((0, utils_js_1.prefixGenerator)((0, io_js_1.mapOutputUpdates)(this.outputKeys, [task]), "updates")));
            this.stream.push(...(0, utils_js_1.gatherIteratorSync)((0, utils_js_1.prefixGenerator)((0, debug_js_1.mapDebugTaskResults)(this.step, [[task, writes]], this.streamKeys), "debug")));
        }
    }
    /**
     * Execute a single iteration of the Pregel loop.
     * Returns true if more iterations are needed.
     * @param params
     */
    async tick(params) {
        const { interruptAfter = [], interruptBefore = [], manager } = params;
        if (this.status !== "pending") {
            throw new Error(`Cannot tick when status is no longer "pending". Current status: "${this.status}"`);
        }
        if (![INPUT_DONE, INPUT_RESUMING].includes(this.input)) {
            await this._first();
        }
        else if (this.tasks.every((task) => task.writes.length > 0)) {
            const writes = this.tasks.flatMap((t) => t.writes);
            // All tasks have finished
            (0, algo_js_1._applyWrites)(this.checkpoint, this.channels, this.tasks, this.checkpointerGetNextVersion);
            // produce values output
            const valuesOutput = await (0, utils_js_1.gatherIterator)((0, utils_js_1.prefixGenerator)((0, io_js_1.mapOutputValues)(this.outputKeys, writes, this.channels), "values"));
            this.stream.push(...valuesOutput);
            // clear pending writes
            this.checkpointPendingWrites = [];
            const metadataWrites = (0, io_js_1.mapOutputUpdates)(this.outputKeys, this.tasks).next().value;
            await this._putCheckpoint({
                source: "loop",
                writes: metadataWrites ?? null,
            });
            // after execution, check if we should interrupt
            if ((0, algo_js_1.shouldInterrupt)(this.checkpoint, interruptAfter, this.tasks)) {
                this.status = "interrupt_after";
                if (this.isNested) {
                    throw new errors_js_1.GraphInterrupt();
                }
                else {
                    return false;
                }
            }
        }
        else {
            return false;
        }
        if (this.step > this.stop) {
            this.status = "out_of_steps";
            return false;
        }
        const nextTasks = (0, algo_js_1._prepareNextTasks)(this.checkpoint, this.graph.nodes, this.channels, this.config, true, {
            step: this.step,
            checkpointer: this.checkpointer,
            isResuming: this.input === INPUT_RESUMING,
            manager,
        });
        this.tasks = nextTasks;
        // Produce debug output
        if (this.checkpointer) {
            this.stream.push(...(await (0, utils_js_1.gatherIterator)((0, utils_js_1.prefixGenerator)((0, debug_js_1.mapDebugCheckpoint)(this.step - 1, // printing checkpoint for previous step
            this.checkpointConfig, this.channels, this.graph.streamChannelsAsIs, this.checkpointMetadata, this.tasks, this.checkpointPendingWrites), "debug"))));
        }
        if (this.tasks.length === 0) {
            this.status = "done";
            return false;
        }
        // if there are pending writes from a previous loop, apply them
        if (this.checkpointPendingWrites.length > 0) {
            for (const [tid, k, v] of this.checkpointPendingWrites) {
                if (k === constants_js_1.ERROR || k === constants_js_1.INTERRUPT) {
                    continue;
                }
                const task = this.tasks.find((t) => t.id === tid);
                if (task) {
                    task.writes.push([k, v]);
                }
            }
        }
        // if all tasks have finished, re-tick
        if (this.tasks.every((task) => task.writes.length > 0)) {
            return this.tick({
                interruptAfter,
                interruptBefore,
                manager,
            });
        }
        // Before execution, check if we should interrupt
        if ((0, algo_js_1.shouldInterrupt)(this.checkpoint, interruptBefore, this.tasks)) {
            this.status = "interrupt_before";
            if (this.isNested) {
                throw new errors_js_1.GraphInterrupt();
            }
            else {
                return false;
            }
        }
        // Produce debug output
        const debugOutput = await (0, utils_js_1.gatherIterator)((0, utils_js_1.prefixGenerator)((0, debug_js_1.mapDebugTasks)(this.step, this.tasks), "debug"));
        this.stream.push(...debugOutput);
        return true;
    }
    /**
     * Resuming from previous checkpoint requires
     * - finding a previous checkpoint
     * - receiving None input (outer graph) or RESUMING flag (subgraph)
     */
    async _first() {
        const isResuming = (Object.keys(this.checkpoint.channel_versions).length !== 0 &&
            this.config.configurable?.[constants_js_1.CONFIG_KEY_RESUMING] !== undefined) ||
            this.input === null;
        if (isResuming) {
            for (const channelName of Object.keys(this.channels)) {
                if (this.checkpoint.channel_versions[channelName] !== undefined) {
                    const version = this.checkpoint.channel_versions[channelName];
                    this.checkpoint.versions_seen[constants_js_1.INTERRUPT] = {
                        ...this.checkpoint.versions_seen[constants_js_1.INTERRUPT],
                        [channelName]: version,
                    };
                }
            }
            // map inputs to channel updates
        }
        else {
            const inputWrites = await (0, utils_js_1.gatherIterator)((0, io_js_1.mapInput)(this.graph.inputChannels, this.input));
            if (inputWrites.length === 0) {
                throw new errors_js_1.EmptyInputError(`Received no input writes for ${JSON.stringify(this.graph.inputChannels, null, 2)}`);
            }
            const discardTasks = (0, algo_js_1._prepareNextTasks)(this.checkpoint, this.graph.nodes, this.channels, this.config, true, { step: this.step });
            (0, algo_js_1._applyWrites)(this.checkpoint, this.channels, discardTasks.concat([
                {
                    name: constants_js_1.INPUT,
                    writes: inputWrites,
                    triggers: [],
                },
            ]), this.checkpointerGetNextVersion);
            // save input checkpoint
            await this._putCheckpoint({
                source: "input",
                writes: this.input ?? null,
            });
        }
        // done with input
        this.input = isResuming ? INPUT_RESUMING : INPUT_DONE;
    }
    async _putCheckpoint(inputMetadata) {
        // Assign step
        const metadata = {
            ...inputMetadata,
            step: this.step,
        };
        // Bail if no checkpointer
        if (this.checkpointer !== undefined) {
            // create new checkpoint
            this.checkpointMetadata = metadata;
            // child graphs keep at most one checkpoint per parent checkpoint
            // this is achieved by writing child checkpoints as progress is made
            // (so that error recovery / resuming from interrupt don't lose work)
            // but doing so always with an id equal to that of the parent checkpoint
            this.checkpoint = (0, base_js_1.createCheckpoint)(this.checkpoint, this.channels, this.step
            // id: this.isNested ? this.config.configurable?.checkpoint_id : undefined,
            );
            this.checkpointConfig = {
                ...this.checkpointConfig,
                configurable: {
                    ...this.checkpointConfig.configurable,
                    checkpoint_ns: this.config.configurable?.checkpoint_ns ?? "",
                },
            };
            const channelVersions = { ...this.checkpoint.channel_versions };
            const newVersions = (0, utils_js_2.getNewChannelVersions)(this.checkpointPreviousVersions, channelVersions);
            this.checkpointPreviousVersions = channelVersions;
            // save it, without blocking
            // if there's a previous checkpoint save in progress, wait for it
            // ensuring checkpointers receive checkpoints in order
            void this._checkpointerPutAfterPrevious({
                config: { ...this.checkpointConfig },
                checkpoint: (0, langgraph_checkpoint_1.copyCheckpoint)(this.checkpoint),
                metadata: { ...this.checkpointMetadata },
                newVersions,
            });
            this.checkpointConfig = {
                ...this.checkpointConfig,
                configurable: {
                    ...this.checkpointConfig.configurable,
                    checkpoint_id: this.checkpoint.id,
                },
            };
        }
        this.step += 1;
    }
}
exports.PregelLoop = PregelLoop;
