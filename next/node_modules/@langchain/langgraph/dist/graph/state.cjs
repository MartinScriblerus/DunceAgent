"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompiledStateGraph = exports.StateGraph = void 0;
/* eslint-disable @typescript-eslint/no-use-before-define */
const runnables_1 = require("@langchain/core/runnables");
const graph_js_1 = require("./graph.cjs");
const write_js_1 = require("../pregel/write.cjs");
const read_js_1 = require("../pregel/read.cjs");
const named_barrier_value_js_1 = require("../channels/named_barrier_value.cjs");
const ephemeral_value_js_1 = require("../channels/ephemeral_value.cjs");
const utils_js_1 = require("../utils.cjs");
const constants_js_1 = require("../constants.cjs");
const errors_js_1 = require("../errors.cjs");
const annotation_js_1 = require("./annotation.cjs");
const ROOT = "__root__";
/**
 * A graph whose nodes communicate by reading and writing to a shared state.
 * Each node takes a defined `State` as input and returns a `Partial<State>`.
 *
 * Each state key can optionally be annotated with a reducer function that
 * will be used to aggregate the values of that key received from multiple nodes.
 * The signature of a reducer function is (left: Value, right: UpdateValue) => Value.
 *
 * See {@link Annotation} for more on defining state.
 *
 * After adding nodes and edges to your graph, you must call `.compile()` on it before
 * you can use it.
 *
 * @example
 * ```ts
 * import {
 *   type BaseMessage,
 *   AIMessage,
 *   HumanMessage,
 * } from "@langchain/core/messages";
 * import { StateGraph, Annotation } from "@langchain/langgraph";
 *
 * // Define a state with a single key named "messages" that will
 * // combine a returned BaseMessage or arrays of BaseMessages
 * const StateAnnotation = Annotation.Root({
 *   sentiment: Annotation<string>,
 *   messages: Annotation<BaseMessage[]>({
 *     reducer: (left: BaseMessage[], right: BaseMessage | BaseMessage[]) => {
 *       if (Array.isArray(right)) {
 *         return left.concat(right);
 *       }
 *       return left.concat([right]);
 *     },
 *     default: () => [],
 *   }),
 * });
 *
 * const graphBuilder = new StateGraph(StateAnnotation);
 *
 * // A node in the graph that returns an object with a "messages" key
 * // will update the state by combining the existing value with the returned one.
 * const myNode = (state: typeof StateAnnotation.State) => {
 *   return {
 *     messages: [new AIMessage("Some new response")],
 *     sentiment: "positive",
 *   };
 * };
 *
 * const graph = graphBuilder
 *   .addNode("myNode", myNode)
 *   .addEdge("__start__", "myNode")
 *   .addEdge("myNode", "__end__")
 *   .compile();
 *
 * await graph.invoke({ messages: [new HumanMessage("how are you?")] });
 *
 * // {
 * //   messages: [HumanMessage("how are you?"), AIMessage("Some new response")],
 * //   sentiment: "positive",
 * // }
 * ```
 */
class StateGraph extends graph_js_1.Graph {
    constructor(fields) {
        super();
        Object.defineProperty(this, "channels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // TODO: this doesn't dedupe edges as in py, so worth fixing at some point
        Object.defineProperty(this, "waitingEdges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        if (isStateDefinition(fields) || isAnnotationRoot(fields)) {
            const spec = isAnnotationRoot(fields) ? fields.spec : fields;
            this.channels = {};
            for (const [key, val] of Object.entries(spec)) {
                if (typeof val === "function") {
                    this.channels[key] = val();
                }
                else {
                    this.channels[key] = val;
                }
            }
        }
        else {
            this.channels = _getChannels(fields.channels);
        }
        for (const c of Object.values(this.channels)) {
            if (c.lc_graph_name === "BinaryOperatorAggregate") {
                this.supportMultipleEdges = true;
                break;
            }
        }
    }
    get allEdges() {
        return new Set([
            ...this.edges,
            ...Array.from(this.waitingEdges).flatMap(([starts, end]) => starts.map((start) => [start, end])),
        ]);
    }
    addNode(key, action, options) {
        if (key in this.channels) {
            throw new Error(`${key} is already being used as a state attribute (a.k.a. a channel), cannot also be used as a node name.`);
        }
        if (key.includes(constants_js_1.CHECKPOINT_NAMESPACE_SEPARATOR)) {
            throw new Error(`"${constants_js_1.CHECKPOINT_NAMESPACE_SEPARATOR}" is a reserved character and is not allowed in node names.`);
        }
        this.warnIfCompiled(`Adding a node to a graph that has already been compiled. This will not be reflected in the compiled graph.`);
        if (key in this.nodes) {
            throw new Error(`Node \`${key}\` already present.`);
        }
        if (key === graph_js_1.END || key === graph_js_1.START) {
            throw new Error(`Node \`${key}\` is reserved.`);
        }
        const nodeSpec = {
            runnable: (0, runnables_1._coerceToRunnable)(action),
            retryPolicy: options?.retryPolicy,
            metadata: options?.metadata,
        };
        this.nodes[key] = nodeSpec;
        return this;
    }
    addEdge(startKey, endKey) {
        if (typeof startKey === "string") {
            return super.addEdge(startKey, endKey);
        }
        if (this.compiled) {
            console.warn("Adding an edge to a graph that has already been compiled. This will " +
                "not be reflected in the compiled graph.");
        }
        for (const start of startKey) {
            if (start === graph_js_1.END) {
                throw new Error("END cannot be a start node");
            }
            if (!Object.keys(this.nodes).some((node) => node === start)) {
                throw new Error(`Need to addNode ${start} first`);
            }
        }
        if (endKey === graph_js_1.END) {
            throw new Error("END cannot be an end node");
        }
        if (!Object.keys(this.nodes).some((node) => node === endKey)) {
            throw new Error(`Need to addNode ${endKey} first`);
        }
        this.waitingEdges.add([startKey, endKey]);
        return this;
    }
    compile({ checkpointer, interruptBefore, interruptAfter, } = {}) {
        // validate the graph
        this.validate([
            ...(Array.isArray(interruptBefore) ? interruptBefore : []),
            ...(Array.isArray(interruptAfter) ? interruptAfter : []),
        ]);
        // prepare output channels
        const stateKeys = Object.keys(this.channels);
        const outputChannels = stateKeys.length === 1 && stateKeys[0] === ROOT
            ? stateKeys[0]
            : stateKeys;
        // create empty compiled graph
        const compiled = new CompiledStateGraph({
            builder: this,
            checkpointer,
            interruptAfter,
            interruptBefore,
            autoValidate: false,
            nodes: {},
            channels: {
                ...this.channels,
                [graph_js_1.START]: new ephemeral_value_js_1.EphemeralValue(),
            },
            inputChannels: graph_js_1.START,
            outputChannels,
            streamChannels: outputChannels,
            streamMode: "updates",
        });
        // attach nodes, edges and branches
        compiled.attachNode(graph_js_1.START);
        for (const [key, node] of Object.entries(this.nodes)) {
            compiled.attachNode(key, node);
        }
        for (const [start, end] of this.edges) {
            compiled.attachEdge(start, end);
        }
        for (const [starts, end] of this.waitingEdges) {
            compiled.attachEdge(starts, end);
        }
        for (const [start, branches] of Object.entries(this.branches)) {
            for (const [name, branch] of Object.entries(branches)) {
                compiled.attachBranch(start, name, branch);
            }
        }
        return compiled.validate();
    }
}
exports.StateGraph = StateGraph;
function _getChannels(schema) {
    const channels = {};
    for (const [name, val] of Object.entries(schema)) {
        if (name === ROOT) {
            channels[name] = (0, annotation_js_1.getChannel)(val);
        }
        else {
            const key = name;
            channels[name] = (0, annotation_js_1.getChannel)(val);
        }
    }
    return channels;
}
class CompiledStateGraph extends graph_js_1.CompiledGraph {
    attachNode(key, node) {
        const stateKeys = Object.keys(this.builder.channels);
        function getStateKey(key, input) {
            if (!input) {
                return write_js_1.SKIP_WRITE;
            }
            else if (typeof input !== "object" || Array.isArray(input)) {
                const typeofInput = Array.isArray(input) ? "array" : typeof input;
                throw new errors_js_1.InvalidUpdateError(`Expected object, got ${typeofInput}`);
            }
            else {
                return key in input ? input[key] : write_js_1.SKIP_WRITE;
            }
        }
        // state updaters
        const stateWriteEntries = stateKeys.map((key) => key === ROOT
            ? { channel: key, value: write_js_1.PASSTHROUGH, skipNone: true }
            : {
                channel: key,
                value: write_js_1.PASSTHROUGH,
                mapper: new utils_js_1.RunnableCallable({
                    func: getStateKey.bind(null, key),
                    trace: false,
                    recurse: false,
                }),
            });
        // add node and output channel
        if (key === graph_js_1.START) {
            this.nodes[key] = new read_js_1.PregelNode({
                tags: [constants_js_1.TAG_HIDDEN],
                triggers: [graph_js_1.START],
                channels: [graph_js_1.START],
                writers: [new write_js_1.ChannelWrite(stateWriteEntries, [constants_js_1.TAG_HIDDEN])],
            });
        }
        else {
            this.channels[key] = new ephemeral_value_js_1.EphemeralValue(false);
            this.nodes[key] = new read_js_1.PregelNode({
                triggers: [],
                // read state keys
                channels: stateKeys.length === 1 && stateKeys[0] === ROOT
                    ? stateKeys
                    : stateKeys.reduce((acc, k) => {
                        acc[k] = k;
                        return acc;
                    }, {}),
                // publish to this channel and state keys
                writers: [
                    new write_js_1.ChannelWrite(stateWriteEntries.concat({ channel: key, value: key }), [constants_js_1.TAG_HIDDEN]),
                ],
                bound: node?.runnable,
                retryPolicy: node?.retryPolicy,
            });
        }
    }
    attachEdge(start, end) {
        if (end === graph_js_1.END) {
            return;
        }
        if (Array.isArray(start)) {
            const channelName = `join:${start.join("+")}:${end}`;
            // register channel
            this.channels[channelName] =
                new named_barrier_value_js_1.NamedBarrierValue(new Set(start));
            // subscribe to channel
            this.nodes[end].triggers.push(channelName);
            // publish to channel
            for (const s of start) {
                this.nodes[s].writers.push(new write_js_1.ChannelWrite([{ channel: channelName, value: s }], [constants_js_1.TAG_HIDDEN]));
            }
        }
        else if (start === graph_js_1.START) {
            const channelName = `start:${end}`;
            // register channel
            this.channels[channelName] =
                new ephemeral_value_js_1.EphemeralValue();
            // subscribe to channel
            this.nodes[end].triggers.push(channelName);
            // publish to channel
            this.nodes[graph_js_1.START].writers.push(new write_js_1.ChannelWrite([{ channel: channelName, value: graph_js_1.START }], [constants_js_1.TAG_HIDDEN]));
        }
        else {
            this.nodes[end].triggers.push(start);
        }
    }
    attachBranch(start, name, branch) {
        // attach branch publisher
        this.nodes[start].writers.push(branch.compile(
        // writer
        (dests) => {
            const filteredDests = dests.filter((dest) => dest !== graph_js_1.END);
            if (!filteredDests.length) {
                return;
            }
            const writes = filteredDests.map((dest) => {
                if ((0, constants_js_1._isSend)(dest)) {
                    return dest;
                }
                return {
                    channel: `branch:${start}:${name}:${dest}`,
                    value: start,
                };
            });
            return new write_js_1.ChannelWrite(writes, [constants_js_1.TAG_HIDDEN]);
        }, 
        // reader
        (config) => read_js_1.ChannelRead.doRead(config, this.outputChannels, true)));
        // attach branch subscribers
        const ends = branch.ends
            ? Object.values(branch.ends)
            : Object.keys(this.builder.nodes);
        for (const end of ends) {
            if (end === graph_js_1.END) {
                continue;
            }
            const channelName = `branch:${start}:${name}:${end}`;
            this.channels[channelName] =
                new ephemeral_value_js_1.EphemeralValue(false);
            this.nodes[end].triggers.push(channelName);
        }
    }
}
exports.CompiledStateGraph = CompiledStateGraph;
function isBaseChannel(obj) {
    return obj != null && typeof obj.lc_graph_name === "string";
}
function isStateDefinition(obj) {
    return (typeof obj === "object" &&
        obj !== null &&
        !Array.isArray(obj) &&
        Object.keys(obj).length > 0 &&
        Object.values(obj).every((v) => typeof v === "function" || isBaseChannel(v)));
}
function isAnnotationRoot(obj) {
    return (typeof obj === "object" &&
        obj !== null &&
        "lc_graph_name" in obj &&
        obj.lc_graph_name === "AnnotationRoot");
}
