"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/riscript";
exports.ids = ["vendor-chunks/riscript"];
exports.modules = {

/***/ "(ssr)/./node_modules/riscript/dist/riscript.js":
/*!************************************************!*\
  !*** ./node_modules/riscript/dist/riscript.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RiGrammar: () => (/* binding */ RiGrammar),\n/* harmony export */   RiScript: () => (/* binding */ RiScript)\n/* harmony export */ });\n/* harmony import */ var he__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! he */ \"(ssr)/./node_modules/he/he.js\");\n/* harmony import */ var mingo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mingo */ \"(ssr)/./node_modules/mingo/dist/cjs/index.js\");\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chevrotain */ \"(ssr)/./node_modules/chevrotain/lib/src/api.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/riscript.js\n\n\n\n\n// src/parser.js\n\nvar RiScriptParser = class extends chevrotain__WEBPACK_IMPORTED_MODULE_2__.CstParser {\n  constructor(allTokens, textTypes) {\n    super(allTokens, { nodeLocationTracking: \"full\" });\n    this.atomTypes = [\"silent\", \"assign\", \"symbol\", \"choice\", \"pgate\", \"text\", \"entity\"];\n    this.textTypes = textTypes;\n    this.buildRules();\n  }\n  parse(opts) {\n    this.input = opts.tokens;\n    let cst = this.script();\n    if (this.errors.length > 0)\n      throw Error(\"[PARSING]\\n\" + this.errors[0].message);\n    return cst;\n  }\n  /*\n    Specification:\n      script: expr+\n      expr: atom+\n      atom: (choice | symbol | text | silent | entity | pgate | assign)\n      wexpr: (expr | Weight)*\n      symbol: Symbol transform*\n      choice: [ gate? orExpr elseExpr? ] transform*\n      assign: Symbol EQ expr\n      silent: { gate? (symbol | assign) }\n      orExpr: wexpr (OR wexpr)*\n      elseExpr: ELSE orExpr\n      pgate: PGate\n      entity: Entity\n      gate: Mingo\n      text: Raw | STAT | AMP \n  */\n  buildRules() {\n    const $ = this, Tokens = this.tokensMap;\n    $.RULE(\"script\", () => {\n      $.MANY(() => $.SUBRULE($.expr));\n    });\n    $.RULE(\"expr\", () => {\n      $.AT_LEAST_ONE(() => $.SUBRULE($.atom));\n    });\n    $.RULE(\"atom\", () => {\n      $.OR(this.atomTypes.map((t) => ({ ALT: () => $.SUBRULE($[t]) })));\n    });\n    $.RULE(\"wexpr\", () => {\n      $.MANY(() => {\n        $.OR([\n          { ALT: () => $.SUBRULE($.expr) },\n          { ALT: () => $.CONSUME(Tokens.Weight) }\n        ]);\n      });\n    });\n    $.RULE(\"symbol\", () => {\n      $.CONSUME(Tokens.Symbol);\n      $.MANY(() => $.CONSUME(Tokens.Transform));\n    });\n    $.RULE(\"choice\", () => {\n      $.CONSUME(Tokens.OC);\n      $.OPTION1(() => $.SUBRULE($.gate));\n      $.SUBRULE($.orExpr);\n      $.OPTION2(() => {\n        $.SUBRULE2($.elseExpr);\n      });\n      $.CONSUME(Tokens.CC);\n      $.MANY(() => $.CONSUME(Tokens.Transform));\n    });\n    $.RULE(\"assign\", () => {\n      $.CONSUME(Tokens.Symbol);\n      $.CONSUME(Tokens.EQ);\n      $.SUBRULE($.expr);\n    });\n    $.RULE(\"silent\", () => {\n      $.CONSUME(Tokens.OS);\n      $.OPTION1(() => $.SUBRULE($.gate));\n      $.CONSUME(Tokens.Symbol);\n      $.OPTION2(() => {\n        $.CONSUME(Tokens.EQ);\n        $.SUBRULE($.expr);\n      });\n      $.CONSUME(Tokens.CS);\n    });\n    $.RULE(\"orExpr\", () => {\n      $.MANY_SEP({\n        SEP: Tokens.OR,\n        DEF: () => $.SUBRULE($.wexpr)\n      });\n    });\n    $.RULE(\"elseExpr\", () => {\n      $.CONSUME(Tokens.ELSE);\n      $.SUBRULE($.orExpr);\n    });\n    $.RULE(\"pgate\", () => {\n      $.CONSUME(Tokens.PendingGate);\n    });\n    $.RULE(\"entity\", () => {\n      $.CONSUME(Tokens.Entity);\n    });\n    $.RULE(\"gate\", () => {\n      $.MANY(() => $.CONSUME(Tokens.Gate));\n    });\n    $.RULE(\"text\", () => {\n      $.OR(this.textTypes.map((t) => ({ ALT: () => $.CONSUME(Tokens[t]) })));\n    });\n    this.performSelfAnalysis();\n  }\n};\n\n// src/util.js\nvar _Util = class _Util {\n  ///////////////////////// FUNCTIONS /////////////////////////\n  static formatAny(o) {\n    if (typeof o === \"string\")\n      return `'${o}'`;\n    else if (typeof o === \"number\")\n      return o;\n    if (typeof o === \"function\")\n      throw Error(\"unexpected function\");\n    return JSON.stringify(o).replace(/\"/g, \"\");\n  }\n  static transformNames(txs) {\n    return txs && txs.length ? txs.map((tx) => tx.image.replace(/(^\\.|\\(\\)$)/g, \"\"), []) : [];\n  }\n  static escapeText(s, quotify) {\n    if (typeof s !== \"string\")\n      return _Util.formatAny(s);\n    let t = s.replace(/\\r?\\n/g, \"\\\\n\");\n    return quotify || !t.length ? \"'\" + t + \"'\" : t;\n  }\n  static stringHash(s) {\n    let chr, hash = 0;\n    for (let i = 0; i < s.length; i++) {\n      chr = s.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0;\n    }\n    let strHash = hash.toString().padStart(9, \"0\");\n    return hash < 0 ? strHash.replace(\"-\", \"0\") : strHash;\n  }\n  static escapeMarkdownLink(txt) {\n    let result = txt;\n    let lookups = { \"[\": \"&lsqb;\", \"]\": \"&rsqb;\", \"(\": \"&lpar;\", \")\": \"&rpar;\", \"/\": \"&sol;\" };\n    Object.entries(lookups).forEach(([k, v]) => result = result.replace(new RegExp(`\\\\${k}`, \"g\"), v));\n    return result;\n  }\n  static slashEscToEntities(s) {\n    s = _Util.replaceAll(s, \"\\\\(\", \"&lpar;\");\n    s = _Util.replaceAll(s, \"\\\\)\", \"&rpar;\");\n    s = _Util.replaceAll(s, \"\\\\[\", \"&lsqb;\");\n    s = _Util.replaceAll(s, \"\\\\]\", \"&rsqb;\");\n    s = _Util.replaceAll(s, \"\\\\{\", \"&lcqb;\");\n    s = _Util.replaceAll(s, \"\\\\}\", \"&rcqb;\");\n    s = _Util.replaceAll(s, \"\\\\@\", \"&commat;\");\n    s = _Util.replaceAll(s, \"\\\\#\", \"&num;\");\n    s = _Util.replaceAll(s, \"\\\\|\", \" &vert\");\n    s = _Util.replaceAll(s, \"\\\\=\", \" &equals\");\n    return s;\n  }\n  static escapeJSONRegex(text) {\n    return text.replace(\n      /\\/([^/]+?)\\/([igmsuy]*)/g,\n      `\"${_Util.RegexEscape}$1${_Util.RegexEscape}$2${_Util.RegexEscape}\"`\n    );\n  }\n  static escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n  }\n  static replaceAll(str, match, replacement) {\n    return str.replace(new RegExp(_Util.escapeRegExp(match), \"g\"), () => replacement);\n  }\n};\n///////////////////////// CONSTANTS /////////////////////////\n/**\n * @static\n * @memberof Util\n * @package\n */\n__publicField(_Util, \"RegexEscape\", \"_RE_\");\nvar Util = _Util;\n\n// src/visitor.js\nvar { escapeText, stringHash, formatAny, transformNames } = Util;\nvar BaseVisitor = class {\n  constructor(riScript) {\n    this.input = \"\";\n    this.nowarn = false;\n    this.tracePath = true;\n    this.scripting = riScript;\n    this.warnOnInvalidGates = false;\n    this.maxRecursionDepth = 10;\n  }\n  textFromCstNode(node) {\n    if (Array.isArray(node))\n      node = node[0];\n    return this.input.substring(\n      node.location.startOffset,\n      node.location.endOffset + 1\n    );\n  }\n  isCstNode(o) {\n    if (Array.isArray(o))\n      o = o[0];\n    return typeof o === \"object\" && (\"accept\" in o || \"name\" in o && \"location\" in o && \"children\" in o);\n  }\n  visit(cstNode, options) {\n    if (Array.isArray(cstNode)) {\n      cstNode = cstNode[0];\n    }\n    if (typeof cstNode === \"undefined\") {\n      return void 0;\n    }\n    if (!this.isCstNode(cstNode)) {\n      throw Error(\"Non-cstNode passed to visit: \" + JSON.stringify(cstNode));\n    }\n    this.nodeText = this.textFromCstNode(cstNode);\n    const name = cstNode.name;\n    if (typeof this[name] !== \"function\") {\n      throw Error(`BaseVisitor.visit: expecting function for this[${name}], found ${typeof this[name]}: ${JSON.stringify(this[name])}`);\n    }\n    return this[name](cstNode.children, options);\n  }\n  validateVisitor() {\n  }\n};\nvar RiScriptVisitor = class extends BaseVisitor {\n  constructor(riScript, context = {}) {\n    super(riScript);\n    this.order = 0;\n    this.trace = 0;\n    this.indent = 0;\n    this.choices = {};\n    this.context = context;\n    this.isNoRepeat = false;\n    this.Symbols = this.scripting.Symbols;\n    this.Escaped = this.scripting.Escaped;\n    this.statics = {};\n    this.dynamics = {};\n    this.pendingGates = {};\n    this.validateVisitor();\n  }\n  start(opts = {}) {\n    this.input = opts.input;\n    this.trace = opts.trace;\n    this.nowarn = opts.silent;\n    this.traceTx = opts.traceTx;\n    if (!opts.cst)\n      throw Error(\"no cst\");\n    return super.visit(opts.cst);\n  }\n  script(ctx) {\n    this.order = this.indent = 0;\n    if (Object.keys(ctx).length !== 1)\n      throw Error(\"script: invalid expr\");\n    let count = ctx.expr[0].children.atom.length;\n    this.print(\"script\", `'${escapeText(this.input)}' :: ${count} atom(s)`);\n    if (!count)\n      return \"\";\n    this.indent++;\n    let value = this.visit(ctx.expr);\n    this.indent--;\n    this.print(\"/script\");\n    return value;\n  }\n  expr(ctx) {\n    const types = Object.keys(ctx);\n    if (types.length !== 1)\n      throw Error(\"invalid expr: \" + types.length);\n    const exprs = ctx.atom.map((c) => this.visit(c));\n    if (exprs.length === 1)\n      return exprs[0];\n    for (let i = 1; i < exprs.length - 1; i++) {\n      if (exprs[i].length === 0 && exprs[i - 1].endsWith(\" \") && exprs[i + 1].startsWith(\" \")) {\n        exprs[i + 1] = exprs[i + 1].substring(1);\n      }\n    }\n    return exprs.join(\"\");\n  }\n  atom(ctx) {\n    let result;\n    const types = Object.keys(ctx);\n    if (types.length !== 1)\n      throw Error(\"invalid atom: \" + types);\n    this.scripting.parser.atomTypes.forEach((type) => {\n      if (ctx[type]) {\n        if (ctx[type].length !== 1) {\n          throw Error(type + \": bad length -> \" + ctx[type].length);\n        }\n        result = this.visit(ctx[type][0]);\n        if (typeof result === \"function\") {\n          result = result.call();\n        }\n      }\n    });\n    return result;\n  }\n  silent(ctx) {\n    this.print(\"silent\", this.nodeText);\n    this.indent++;\n    if (ctx.EQ) {\n      this.assign(ctx, { silent: true });\n    } else {\n      this.symbol(ctx, { silent: true });\n    }\n    this.indent--;\n    this.print(\"/silent\", \"statics=\" + formatAny(this.statics));\n    return \"\";\n  }\n  assign(ctx, opts) {\n    const sym = ctx.Symbol[0].image;\n    const original = this.nodeText;\n    const ident = sym.replace(this.scripting.regex.AnySymbol, \"\");\n    const isStatic = sym.startsWith(this.Symbols.STATIC);\n    const isSilent = opts?.silent;\n    let info = `${original} ${isStatic && isSilent ? \"{#static,silent}\" : (isStatic ? \"{#static}\" : \"\") + (isSilent ? \"{silent}\" : \"\")}`;\n    this.print(\"assign\", info);\n    let value;\n    if (isStatic) {\n      if (ident in this.statics && !this.scripting.isParseable(this.statics[ident])) {\n        value = this.statics[ident];\n        info = `${sym} = ${formatAny(value)} {#resolved}`;\n      } else {\n        this.indent++;\n        value = this.visit(ctx.expr);\n        this.indent--;\n        this.statics[ident] = value;\n        if (typeof value === \"string\" && this.scripting.isParseable(value)) {\n          value = this.inlineStaticAssign(ident, ctx.Transform, value);\n        }\n        info = `${sym} = ${formatAny(value)}`;\n      }\n      this.print(\"/assign\", info);\n    } else {\n      const $ = this;\n      this.indent++;\n      value = () => $.visit(ctx.expr);\n      this.indent--;\n      this.dynamics[ident] = value;\n      this.print(\"/assign\", `${sym} =  <f*:pending>`);\n    }\n    return value;\n  }\n  // end assign\n  symbol(ctx, opts) {\n    if (ctx.Symbol.length !== 1)\n      throw Error(\"[1] invalid symbol\");\n    const isSilent = opts?.silent;\n    const original = this.nodeText;\n    const sym = ctx.Symbol[0].image.replace(/\\(\\)$/, \"\");\n    const ident = sym.replace(this.scripting.regex.AnySymbol, \"\");\n    this.isNoRepeat = this.hasNoRepeat(ctx.Transform);\n    this.print(\"symbol\", `${original} ${isSilent ? \" {silent}\" : \"\"}`);\n    let { result, isStatic, isUser, resolved } = this.checkContext(ident);\n    if (!isStatic && this.scripting.regex.StaticSymbol.test(sym)) {\n      if (!this.scripting.regex.Entity.test(sym)) {\n        throw Error(`Attempt to refer to dynamic symbol '${ident}' as ${this.Symbols.STATIC}${ident}, did you mean $${ident}?`);\n      }\n    }\n    for (let i = 0; typeof result === \"function\"; i++) {\n      result = result.call();\n      resolved = !this.scripting.isParseable(result);\n      if (i === this.maxRecursionDepth)\n        throw Error(\"Max recursion depth reached\");\n    }\n    if (this.isNoRepeat && (isStatic || isUser)) {\n      this.isNoRepeat = false;\n      const msg = \"Attempt to call norepeat() on \" + (isStatic ? \"static symbol '\" + sym + \"'. Did you mean to use '\" + this.Symbols.DYNAMIC + ident + \"' ?\" : \"non-dynamic symbol '\" + ident + \"'. Did you mean to define '\" + this.Symbols.DYNAMIC + ident + \"' in riscript?\");\n      throw Error(msg);\n    }\n    if (typeof result === \"undefined\") {\n      this.print(\"/symbol\", sym + \" -> '\" + original + \"' ctx=\" + this.lookupsToString(), \"[deferred]\", opts?.silent ? \"{silent}\" : \"\");\n      return original;\n    }\n    let info = opts?.trace ? `${original.replace(/\\(\\)$/, \"\")} -> ${formatAny(result)}` + (opts?.silent ? \" {silent}\" : \"\") : null;\n    if (typeof result === \"string\" && !resolved) {\n      if (isStatic) {\n        result = this.inlineStaticAssign(ident, ctx.Transform, result);\n        this.print(\"/symbol\", `${original} -> ${result}`);\n      } else {\n        if (ctx.Transform)\n          result = this.restoreTransforms(result, ctx.Transform);\n        this.print(\"/symbol\", info);\n      }\n      return result;\n    }\n    if (isStatic)\n      this.statics[ident] = result;\n    if (ctx.Transform) {\n      result = this.applyTransforms(result, ctx.Transform);\n      info += \"-> '\" + result + \"'\";\n      if (this.isNoRepeat)\n        info += \" (norepeat)\";\n    } else if (result.length === 0 && sym.length === 1) {\n      result = sym;\n      info = \"** $ **\";\n    }\n    this.print(\"/symbol\", info);\n    this.isNoRepeat = false;\n    return result;\n  }\n  // end symbol\n  choice(ctx, opts) {\n    const $ = this.Symbols;\n    const original = this.nodeText;\n    const choiceKey = stringHash(original + \" #\" + this.choiceId(ctx));\n    let gateText, gateResult, hasTransforms = ctx.Transform;\n    if (!this.isNoRepeat && this.hasNoRepeat(ctx.Transform)) {\n      throw Error(\"noRepeat() not allowed on choice (use a $variable instead): \" + original);\n    }\n    this.print(\"choice\", original);\n    let decision = \"accept\";\n    if (opts?.forceReject) {\n      decision = \"reject\";\n    } else {\n      let gateCtx = ctx?.gate?.[0]?.children?.Gate;\n      if (gateCtx) {\n        gateText = gateCtx[0].image;\n        this.indent++;\n        gateResult = this.visit(ctx.gate);\n        this.indent--;\n        decision = gateResult.decision;\n        let ginfo = `${gateText} -> ${decision !== \"defer\" ? decision.toUpperCase() : `DEFER ${$.PENDING_GATE}${choiceKey}`}  ${this.lookupsToString()}`;\n        this.print(\"gate\", ginfo);\n      }\n      if (gateResult && gateResult.decision === \"defer\") {\n        this.pendingGates[choiceKey] = {\n          gateText,\n          deferredContext: ctx,\n          operands: gateResult.operands\n        };\n        return `${$.PENDING_GATE}${choiceKey}`;\n      }\n    }\n    let orExpr = ctx?.orExpr[0];\n    if (decision === \"reject\") {\n      if (!(\"elseExpr\" in ctx))\n        return \"\";\n      orExpr = ctx.elseExpr[0].children.orExpr[0];\n    }\n    const options = this.parseOptions(orExpr);\n    if (!options)\n      throw Error(\"No options in choice: \" + original);\n    let value = null;\n    const excluded = [];\n    let restored = false;\n    while (value === null) {\n      value = this.choose(options, excluded);\n      for (let i = 0; this.isCstNode(value); i++) {\n        this.indent++;\n        value = this.visit(value);\n        this.indent--;\n        if (i === this.maxRecursionDepth)\n          throw Error(\"Max recursion depth reached\");\n      }\n      if (typeof value === \"string\") {\n        value = value.trim();\n      } else if (typeof value !== \"number\") {\n        if (ctx.Transform)\n          value = this.applyTransforms(value, ctx.Transform);\n        hasTransforms = false;\n      }\n      if (this.scripting.isParseable(value)) {\n        if (ctx.Transform)\n          value = this.restoreTransforms(value, ctx.Transform);\n        restored = true;\n        break;\n      }\n      if (hasTransforms)\n        value = this.applyTransforms(value, ctx.Transform);\n      if (this.isNoRepeat && value === this.choices[choiceKey]) {\n        this.print(\"choice-reject\", value + \" [norepeat]\");\n        excluded.push(value);\n        value = null;\n        continue;\n      }\n    }\n    if (!restored)\n      this.choices[choiceKey] = value;\n    this.print(\"choice/\", original + \" -> '\" + value + \"'\");\n    return value;\n  }\n  // end choice\n  choose(options, excludes = []) {\n    if (!options || !options.length) {\n      throw Error(\"Invalid choice: no options\");\n    }\n    const valid = options.filter((x) => !excludes.includes(x));\n    if (!valid.length) {\n      throw Error(\"Invalid choice: no valid options\");\n    }\n    const index = this.scripting.RiTa.randi(valid.length);\n    let value = valid[index];\n    return value;\n  }\n  text(ctx) {\n    if (Object.keys(ctx).length !== 1)\n      throw Error(\"[2] invalid text\");\n    const type = this.scripting.textTypes.filter((t) => ctx[t]);\n    const image = ctx[type][0].image;\n    this.print(\"text/\", escapeText(\"'\" + image + \"'\"));\n    return image;\n  }\n  entity(ctx) {\n    return this.nodeText;\n  }\n  gate(ctx) {\n    if (ctx.Gate.length !== 1)\n      throw Error(\"Invalid gate: \" + ctx.Gate);\n    let raw = ctx.Gate[0].image, mingoQuery;\n    if (raw.startsWith(this.Symbols.OPEN_GATE)) {\n      raw = raw.substring(1);\n    }\n    try {\n      mingoQuery = this.scripting.createQuery(raw);\n    } catch (e) {\n      if (!this.warnOnInvalidGates) {\n        throw Error(`Invalid gate[2]: \"@${raw}\"\n\nRootCause -> ${e}`);\n      }\n      if (!this.scripting.RiTa.SILENT && !this.nowarn) {\n        console.warn(`[WARN] Ignoring invalid gate: @${raw}@\n`, e);\n      }\n      return { decision: \"accept\" };\n    }\n    const resolvedOps = {};\n    const unresolvedOps = [];\n    const operands = mingoQuery.operands();\n    operands.forEach((sym) => {\n      let { result: result2, resolved, isStatic, isUser } = this.checkContext(sym);\n      for (let i = 0; typeof result2 === \"function\"; i++) {\n        result2 = result2.call();\n        resolved = !this.scripting.isParseable(result2);\n        if (i === this.maxRecursionDepth)\n          throw Error(\"Max recursion depth reached\");\n      }\n      if (typeof result2 === \"undefined\" || !resolved) {\n        unresolvedOps.push(sym);\n      } else {\n        if (isStatic) {\n          this.statics[sym] = result2;\n        } else if (isUser) {\n          this.context[sym] = result2;\n        } else {\n          this.dynamics[sym] = result2;\n        }\n        resolvedOps[sym] = result2;\n      }\n    });\n    if (Object.keys(resolvedOps).length + unresolvedOps.length !== operands.length) {\n      throw Error(\"invalid operands\");\n    }\n    if (unresolvedOps.length) {\n      return { decision: \"defer\", operands: unresolvedOps };\n    }\n    let result = mingoQuery.test(resolvedOps);\n    if (!result && this.castValues(resolvedOps)) {\n      result = mingoQuery.test(resolvedOps);\n    }\n    return { decision: result ? \"accept\" : \"reject\" };\n  }\n  pgate(ctx) {\n    this.print(\"pgate\", this.nodeText);\n    const original = this.nodeText;\n    const ident = original.replace(this.Symbols.PENDING_GATE, \"\");\n    const lookup = this.pendingGates[ident];\n    if (!lookup) {\n      throw Error('no pending gate=\"' + original + '\" pgates=' + JSON.stringify(Object.keys(this.pendingGates)));\n    }\n    const stillUnresolved = lookup.operands.some((o) => {\n      let { result, resolved } = this.checkContext(o);\n      if (typeof result === \"function\") {\n        result = result.call();\n        resolved = !this.scripting.isParseable(result);\n      }\n      return typeof result === \"undefined\" || !resolved;\n    });\n    if (stillUnresolved)\n      return original;\n    return this.choice(lookup.deferredContext);\n  }\n  else(ctx) {\n    return this.visit(ctx.expr).trim();\n  }\n  // Helpers ================================================\n  hasNoRepeat(tfs) {\n    const transforms = transformNames(tfs);\n    if (transforms.length) {\n      return transforms.includes(\"nr\") || transforms.includes(\"norepeat\");\n    }\n    return false;\n  }\n  checkContext(ident, opts = {}) {\n    let isStatic = false;\n    let isUser = false;\n    let result;\n    if (ident.length === 0) {\n      return { result: \"\", resolved: true, isStatic, isUser };\n    }\n    result = this.dynamics[ident];\n    if (typeof result === \"undefined\") {\n      result = this.statics[ident];\n      if (typeof result !== \"undefined\") {\n        isStatic = true;\n      }\n    }\n    if (typeof result === \"undefined\") {\n      result = this.context[ident];\n      if (typeof result !== \"undefined\") {\n        isUser = true;\n      }\n    }\n    if (typeof result === \"undefined\") {\n      result = this.scripting.transforms[ident];\n    }\n    const resolved = !this.scripting.isParseable(result);\n    return { result, isStatic, isUser, resolved };\n  }\n  inlineStaticAssign(ident, tfs, result) {\n    const $ = this.Symbols;\n    const lhs = $.STATIC + ident;\n    const rhs = result;\n    let stmt = $.OPEN_CHOICE + (lhs + \"=\" + rhs) + $.CLOSE_CHOICE;\n    result = this.restoreTransforms(stmt, tfs);\n    return result;\n  }\n  choiceId(ctx) {\n    if (!ctx.OC || !ctx.OC.length)\n      throw Error(\"invalid choice\");\n    return ctx.OC[0].startOffset + \".\" + ctx.OC[0].endOffset;\n  }\n  parseOptions(ctx) {\n    const options = [];\n    if (ctx && ctx?.children?.wexpr) {\n      const wexprs = ctx.children.wexpr;\n      for (let i = 0; i < wexprs.length; i++) {\n        const wexpr = wexprs[i];\n        const expr = wexpr.children.expr;\n        if (expr && expr.length != 1) {\n          throw Error(\"invalid choice-expr: \" + expr.length);\n        }\n        const weight = wexpr.children.Weight;\n        if (weight) {\n          if (weight.length != 1) {\n            throw Error(\"invalid weight: \" + weight.length);\n          }\n          let mult = 1;\n          try {\n            mult = parseInt(\n              this.Symbols.CLOSE_WEIGHT.length ? weight[0].image.trim().slice(1, -1) : weight[0].image.trim().slice(1)\n            );\n          } catch (e) {\n            console.log(\"EX: \" + mult);\n          }\n          Array.from({ length: mult }, () => options.push(expr));\n        } else {\n          options.push(expr || \"\");\n        }\n      }\n    }\n    return options;\n  }\n  applyTransforms(value, txs) {\n    this.indent++;\n    if (this.traceTx) {\n      console.log(\"applyTransforms\", this.formatTxs(...arguments));\n    }\n    for (let i = 0; i < txs.length; i++) {\n      value = this.applyTransform(value, txs[i]);\n    }\n    this.indent--;\n    return value;\n  }\n  applyTransform(target, transform) {\n    const image = transform.image;\n    const raw = target + image;\n    const original = formatAny(target) + image;\n    const tx = image.substring(1).replace(/\\(\\)$/, \"\");\n    const RiTa = this.scripting.RiTa;\n    let result;\n    if (typeof this.dynamics[tx] === \"function\") {\n      result = this.dynamics[tx].bind(this.context)(target);\n    } else if (typeof this.statics[tx] === \"function\") {\n      result = this.statics[tx].call(this.context, target);\n    } else if (typeof this.context[tx] === \"function\") {\n      result = this.context[tx].call(this.context, target);\n    } else if (typeof this.scripting.transforms[tx] === \"function\") {\n      result = this.scripting.transforms[tx].call(this.context, target);\n    } else if (typeof target[tx] === \"function\") {\n      result = target[tx]();\n    } else {\n      if (target.hasOwnProperty(tx)) {\n        result = target[tx];\n      } else {\n        if (!RiTa.SILENT && !this.silent) {\n          console.warn(\"[WARN] Unresolved transform: \" + raw);\n        }\n        result = raw.replace(/\\(\\)$/, \"&lpar;&rpar;\");\n      }\n    }\n    this.print(\"transform/\", `${original} -> '${result}'`);\n    return result;\n  }\n  // value is not yet resolved, so store with transform for later\n  restoreTransforms(value, txs) {\n    if (typeof value === \"string\") {\n      const choiceRE = new RegExp(\"^\" + this.Escaped.OPEN_CHOICE + \".*\" + this.Escaped.CLOSE_CHOICE + \"$\");\n      const symbolRE = new RegExp(`(${this.Escaped.DYNAMIC}|${this.Escaped.STATIC}[A-Za-z_0-9])[A-Za-z_0-9]*`);\n      if (!choiceRE.test(value) && !symbolRE.test(value)) {\n        value = this.Symbols.OPEN_CHOICE + value + this.Symbols.CLOSE_CHOICE;\n      }\n      if (txs) {\n        txs.forEach((tx) => value += tx.image);\n      }\n      if (this.traceTx)\n        console.log(\"restoreTransforms:\", value);\n    }\n    return value;\n  }\n  castValues(obj) {\n    let madeCast = false;\n    Object.entries(obj).forEach(([k, v]) => {\n      const num = parseFloat(v);\n      if (!isNaN(num)) {\n        madeCast = true;\n        obj[k] = num;\n      }\n    });\n    return madeCast;\n  }\n  contextIsResolved(table) {\n    let allResolved = true;\n    Object.entries(table).forEach(([key, val]) => {\n      if (!this.scripting.isParseable(val)) {\n        allResolved = false;\n      }\n    });\n    return allResolved;\n  }\n  lookupsToString() {\n    const dyns = {}, stats = {};\n    Object.entries(this.dynamics || {}).forEach(([k, v]) => dyns[`$${k}`] = v);\n    Object.entries(this.statics || {}).forEach(([k, v]) => stats[`#${k}`] = v);\n    return JSON.stringify({ ...this.context, ...stats, ...dyns }, (k, v) => typeof v === \"function\" ? \"<f*:pending>\" : v).replace(/\"/g, \"\");\n  }\n  formatTxs(value, txs) {\n    return value + txs.map((tx) => tx.image.replace(/()/, \"\") + \"()\").join(\"\");\n  }\n  print(s, ...args) {\n    if (this.trace) {\n      let indentStr = \"  \".repeat(this.indent);\n      let msg = `${indentStr}<${s}>${s.startsWith(\"/\") ? \"\" : \" \"}`;\n      if (++this.order < 10)\n        msg = \" \" + msg;\n      console.log(this.order, msg, ...args);\n    }\n  }\n};\n\n// src/tokens.js\n\nfunction getTokens(v2Compatible) {\n  let Symbols = {\n    OR: \"|\",\n    ELSE: \"||\",\n    DYNAMIC: \"$\",\n    STATIC: \"#\",\n    ENTITY: \"&\",\n    OPEN_GATE: \"@\",\n    PENDING_GATE: \"@@\",\n    OPEN_SILENT: \"{\",\n    CLOSE_SILENT: \"}\"\n  };\n  let v2Symbols = {\n    OPEN_CHOICE: \"(\",\n    CLOSE_CHOICE: \")\",\n    OPEN_WEIGHT: \"[\",\n    CLOSE_WEIGHT: \"]\",\n    CONTINUATION: \"\\\\\"\n  };\n  let v3Symbols = {\n    OPEN_CHOICE: \"[\",\n    CLOSE_CHOICE: \"]\",\n    OPEN_WEIGHT: \"^\",\n    // also allows (int), eg. (3)\n    CLOSE_WEIGHT: \"^\",\n    CONTINUATION: \"~\"\n  };\n  Object.assign(Symbols, v2Compatible ? v2Symbols : v3Symbols);\n  const Escaped = {};\n  Object.entries(Symbols).forEach(([k, v]) => {\n    Escaped[k] = escapeRegex(v);\n  });\n  const ENTITY_PATTERN = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/i;\n  const PENDING_GATE_PATTERN = new RegExp(`${Escaped.PENDING_GATE}([0-9]{9,11})`);\n  Escaped.SPECIAL = Object.values(Escaped).join(\"\").replace(/[<>@]/g, \"\");\n  const DYN = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"DYN\", pattern: new RegExp(Escaped.DYNAMIC) });\n  const STAT = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"STAT\", pattern: new RegExp(Escaped.STATIC) });\n  const OC = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"OC\", pattern: new RegExp(Escaped.OPEN_CHOICE + \"\\\\s*\") });\n  const CC = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"CC\", pattern: new RegExp(`\\\\s*${Escaped.CLOSE_CHOICE}`) });\n  const OS = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"OS\", pattern: new RegExp(`${Escaped.OPEN_SILENT}\\\\s*`) });\n  const CS = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"CS\", pattern: new RegExp(`\\\\s*${Escaped.CLOSE_SILENT}`) });\n  const ELSE = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"ELSE\", pattern: /\\s*\\|\\|\\s*/ });\n  const OR = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"OR\", pattern: /\\s*\\|\\s*/ });\n  const EQ = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"EQ\", pattern: /\\s*=\\s*/ });\n  const AMP = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"AMP\", pattern: /&/ });\n  const Symbol2 = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Symbol\", pattern: new RegExp(`(${Escaped.DYNAMIC}|${Escaped.STATIC}[A-Za-z_0-9])[A-Za-z_0-9]*(\\\\(\\\\))?`) });\n  const Transform = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Transform\", pattern: /\\.[A-Za-z_0-9][A-Za-z_0-9]*(\\(\\))?/ });\n  const Entity = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Entity\", pattern: ENTITY_PATTERN });\n  const Weight = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Weight\", pattern: new RegExp(`\\\\s*${Escaped.OPEN_WEIGHT}\\\\d+${Escaped.CLOSE_WEIGHT}\\\\s*`) });\n  const PendingGate = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"PendingGate\", pattern: PENDING_GATE_PATTERN });\n  const Raw = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Raw\", pattern: new RegExp(`[^${Escaped.SPECIAL}]+`) });\n  const Gate = (0,chevrotain__WEBPACK_IMPORTED_MODULE_2__.createToken)({ name: \"Gate\", line_breaks: true, pattern: bracketMatch });\n  const tokens = [Gate, Entity, Weight, ELSE, OC, CC, OR, EQ, Symbol2, DYN, STAT, AMP, Transform, OS, CS, PendingGate, Raw];\n  return { tokens, Constants: { Symbols, Escaped } };\n}\nfunction bracketMatch(text, startOffset) {\n  if (!/^@/.test(text.substring(startOffset)))\n    return null;\n  let endOffset = startOffset + 1;\n  let dbug = 0;\n  if (dbug)\n    console.log(\"bracketMatch\", text);\n  let charCode = text.charCodeAt(endOffset);\n  while (charCode === 32) {\n    endOffset++;\n    charCode = text.charCodeAt(endOffset);\n  }\n  if (charCode !== 123) {\n    if (dbug)\n      console.log(`  \"${text.substring(startOffset, endOffset)}\" -> null1`);\n    return null;\n  }\n  endOffset++;\n  charCode = text.charCodeAt(endOffset);\n  let depth = 1;\n  while (depth > 0) {\n    if (charCode === 123)\n      depth++;\n    else if (charCode === 125)\n      depth--;\n    if (dbug)\n      console.log(\"  depth\", depth, text.substring(startOffset, endOffset));\n    endOffset++;\n    charCode = text.charCodeAt(endOffset);\n  }\n  if (endOffset === startOffset) {\n    if (dbug)\n      console.log(`\"${text.substring(startOffset, endOffset)}\" -> null3`);\n    return null;\n  } else {\n    let matchedString = text.substring(startOffset, endOffset);\n    if (dbug)\n      console.log(\"  returned -> \", [matchedString]);\n    return [matchedString];\n  }\n}\nfunction escapeRegex(s) {\n  return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nvar TextTypes = [\"Raw\", \"STAT\", \"AMP\"];\n\n// src/grammar.js\nvar _RiGrammar = class _RiGrammar {\n  // assigned in riscript.js\n  /**\n   * Creates an instance of RiGrammar.\n   * @param {Object<string, string>|string} [rules] - an object (or JSON string) containing the rules\n   * @param {Object<string, any>} [context] - the context (or world-state)\n   * @param {Object<string, any>} [options] - options for the grammar\n   */\n  constructor(rules = {}, context = {}, options = {}) {\n    this.rules = {};\n    this.context = context;\n    this.scripting = options.RiTa?.riscript ?? new RiScript(options);\n    if (typeof rules === \"string\") {\n      rules = parseJSON(rules);\n    }\n    if (typeof rules !== \"object\") {\n      throw Error(\"RiGrammar: expecting object, found \" + typeof rules);\n    }\n    this.setRules(rules);\n  }\n  /**\n   * Creates a new RiGrammar from the `rules`, `context` and `options`, then calls `expand()` on it.\n   * @param {string} rules - an object containing the rules\n   * @param {object} [context] - the context (or world-state) for the expansion\n   * @param {object} [options] - options for the expansion\n   * @param {string} [options.start='$start'] - the rule to start from\n   * @param {boolean} [options.trace=false] - whether to trace the evaluation to the console\n   * @param {boolean} [options.onepass=false] - whether to only do one evaluation pass \n   * @param {boolean} [options.silent=false] - whether to suppress console warnings\n   * @returns {string} - the expanded text\n   */\n  static expand(rules, context, options) {\n    return new _RiGrammar(rules, context).expand(options);\n  }\n  /**\n   * Adds a transform to the Grammar instance\n   * @param {string} name - the name of the transform\n   * @param {Function} def - a function that takes a string and returns a string\n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  addTransform(name, def) {\n    this.scripting.addTransform(name, def);\n    return this;\n  }\n  /**\n   * Removes a transform from the Grammar instance\n   * @param {string} name \n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  removeTransform(name) {\n    this.scripting.removeTransform(name);\n    return this;\n  }\n  /**\n   * Returns the names of all current transforms\n   * @returns {string[]} the names of the transforms\n   */\n  getTransforms() {\n    return this.scripting.getTransforms();\n  }\n  /**\n   * Tests whether two grammars are equal and returns a boolean\n   * @param {RiGrammar} rg - the grammar to compare to \n   * @returns {boolean} - whether the grammars are equal\n   */\n  equals(rg) {\n    return rg.toJSON() === this.toJSON();\n  }\n  /**\n   * Expands a grammar from the supplied rule. If no rule is provided the `$start` and `<start>`\n   *  symbols will be checked respectively. If a context is needed, it should be passed when the\n   *  grammar is created.\n   * @param {object} [options] - options for the expansion\n   * @param {string} [options.start='$start'] - the rule to start from\n   * @param {boolean} [options.trace=false] - whether to trace the evaluation to the console\n   * @param {boolean} [options.onepass=false] - whether to only do one evaluation pass \n   * @param {boolean} [options.silent=false] - whether to suppress console warnings\n   * @returns {string} - the expanded text\n   */\n  expand(options = {}) {\n    if (\"context\" in options) {\n      throw Error(\"pass context to RiScript.grammar() or new RiGrammar() instead\");\n    }\n    let visitor = new RiScriptVisitor(this.scripting);\n    visitor.context = this.context || {};\n    let clonedOpts = { ...options, visitor, input: this._toScript(options) };\n    return this.scripting._evaluate(clonedOpts);\n  }\n  /**\n   * Validates a rule and adds a new rule to the grammar\n   * @param {string} name - the name of the rule\n   * @param {string} def - the definition of the rule\n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  addRule(name, def) {\n    this._validateRule(name, def);\n    this.rules[name] = def;\n    return this;\n  }\n  /**\n   * Sets the rules for the grammar, removing any previous rules\n   * @param {object|string} rules - an object or JSON string holding the rules for the grammar \n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  setRules(rules) {\n    if (typeof rules === \"undefined\")\n      throw Error(\"undefined rules\");\n    this.rules = {};\n    let incoming = typeof rules === \"string\" ? parseJSON(rules) : rules;\n    Object.entries(incoming).forEach((e) => this.addRule(...e));\n    return this;\n  }\n  /**\n   * Removes a rule from the grammar\n   * @param {string} name - the name of the rule to remove\n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  removeRule(name) {\n    if (name in this.rules) {\n      delete this.rules[name];\n    }\n    return this;\n  }\n  /**\n   * Returns a JSON representation of the grammar rules, accepting options from `JSON.stringify()`\n   * @param {any} [replacer] - a replacer function or array\n   * @param {string | number} [space] - the number of spaces to indent\n   * @returns {string} - the JSON representation of the grammar\n   */\n  toJSON(replacer, space) {\n    return JSON.stringify(this.rules, replacer, space);\n  }\n  /** \n   * Returns a string representation of the grammar, accecpting the same options as `JSON.stringify()`\n   * @param {object} [options] - options for the string representation\n   * @param {any} [options.replacer] - a replacer function or array\n   * @param {string | number} [options.space] - the number of spaces to indent\n   * @param {string} [options.linebreak] - the linebreak character to use\n   */\n  toString(options = {}) {\n    let replacer = options.replacer || 0;\n    let space = options.space || 2;\n    let lb = options?.linebreak;\n    let res = this.toJSON(replacer, space);\n    if (lb)\n      res = res.replace(/\\n/g, lb);\n    return res;\n  }\n  /**\n   * Creates a new RiGrammar from the supplied JSON string\n   * @param {string} json - a JSON string representing the grammar\n   * @param {object} [context] - optional context for the grammar\n   * @returns {RiGrammar} - the RiGrammar instance\n   */\n  static fromJSON(json, context) {\n    return new _RiGrammar(JSON.parse(json), context);\n  }\n  //////////////////////////////////////////////////////////////////////////////\n  /**\n   * Converts grammar to inline rules; rules are dynamic, unless otherwise specified with leading #\n   * @private\n   */\n  _toScript(opts) {\n    let script = \"\", start = opts.start || \"start\";\n    let { Symbols } = this.scripting;\n    if (start.startsWith(Symbols.DYNAMIC)) {\n      start = start.substring(Symbols.DYNAMIC.length);\n    }\n    if (start.startsWith(Symbols.STATIC)) {\n      start = start.substring(Symbols.STATIC.length);\n    }\n    if (!(start in this.rules || Symbols.STATIC + start in this.rules)) {\n      throw Error('Rule: \"' + start + '\" not found in grammar');\n    }\n    Object.entries(this.rules).forEach(([name, rule], i) => {\n      while (name.startsWith(Symbols.DYNAMIC)) {\n        name = name.substring(1);\n      }\n      if (!name.startsWith(Symbols.STATIC)) {\n        name = Symbols.DYNAMIC + name;\n      }\n      if (!this.scripting.regex.ChoiceWrap.test(rule)) {\n        rule = Symbols.OPEN_CHOICE + rule + Symbols.CLOSE_CHOICE;\n      }\n      script += `${name}=${rule}\n`;\n    });\n    if (opts.trace)\n      console.log(\"Grammar:\\n\" + script.replace(/^\\$/gm, \"  $\"));\n    script += `${Symbols.DYNAMIC}${start}`;\n    return script;\n  }\n  /**\n   * Validates a grammar rule\n   * @private\n   */\n  _validateRule(name, def) {\n    if (typeof name !== \"string\" || name.length === 0) {\n      throw Error(\"expected [string] name\");\n    }\n    if (typeof def === \"undefined\") {\n      throw Error(\"undefined rule def: \" + name);\n    }\n    let { Symbols } = this.scripting;\n    if (name.startsWith(Symbols.DYNAMIC)) {\n      name = name.substring(Symbols.DYNAMIC.length);\n      throw Error(\"Grammar rules are dynamic by default; if you need a static rule, use '\" + Symbols.STATIC + name + \"', otherwise just use '\" + name + \"'.\");\n    }\n  }\n};\n__publicField(_RiGrammar, \"RiScript\", null);\nvar RiGrammar = _RiGrammar;\nfunction parseJSON(json) {\n  if (typeof json === \"string\") {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      throw Error(\"RiGrammar appears to be invalid JSON, please check it at http://jsonlint.com/\\n\" + json);\n    }\n  }\n}\n\n// src/riscript.js\nvar { decode } = he__WEBPACK_IMPORTED_MODULE_0__;\nvar Vowels = /[aeiou]/;\nvar HtmlEntities = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi;\nvar { escapeText: escapeText2, slashEscToEntities, escapeMarkdownLink, escapeJSONRegex } = Util;\nvar RiQuery = class extends mingo__WEBPACK_IMPORTED_MODULE_1__.Query {\n  constructor(scripting, condition, options) {\n    if (typeof condition !== \"string\") {\n      try {\n        condition = JSON.stringify(condition);\n      } catch (e) {\n        throw Error(condition.toString().includes(\"@\") ? \"Replace @ with $ when passing an object to RiQuery\\nRoot: \" + e : e);\n      }\n    }\n    if (!condition.includes(\"$\"))\n      throw Error(\"Invalid Gate: '\" + condition + \"' -> operand must include $symbol or $function()\");\n    condition = condition.replace(/(\\$|\\(\\))/g, \"\").replace(/@/g, \"$\");\n    condition = scripting.parseJSOL(condition);\n    super(condition, options);\n  }\n  test(obj) {\n    let compiled = this.compiled;\n    for (let i = 0, len = compiled.length; i < len; i++) {\n      if (!compiled[i](obj))\n        return false;\n    }\n    return true;\n  }\n  operands() {\n    const stack = [this.condition];\n    const keys = /* @__PURE__ */ new Set();\n    while (stack?.length > 0) {\n      const currentObj = stack.pop();\n      Object.keys(currentObj).forEach((key) => {\n        const value = currentObj[key];\n        if (!key.startsWith(\"$\"))\n          keys.add(key);\n        if (typeof value === \"object\" && value !== null) {\n          const eles = Array.isArray(value) ? value : [value];\n          eles.forEach((ele) => stack.push(ele));\n        }\n      });\n    }\n    return Array.from(keys);\n  }\n};\nvar _RiScript = class _RiScript {\n  /**\n   * Create a RiTa grammar instance\n   * @param {object} [rules] - the rules of the grammar\n   * @param {object} [context] - the context of the grammar\n   * @param {object} [options] - options for the evaluation\n   * @returns {RiGrammar} - a new RiGrammar instance\n   */\n  static grammar(rules, context, options) {\n    return new RiGrammar(rules, context, options);\n  }\n  /**\n   * Evaluates the input script via the RiScript parser\n   * @param {string} script - the script to evaluate\n   * @param {object} [context] - the context (or world-state) to evaluate in\n   * @param {object} [options] - options for the evaluation\n   * @param {object} [options.RiTa] - optionals RiTa object to use in transforms\n   * @param {number} [options.compatibility] - the RiTa compatibility level (pass 2 for v2)\n   * @param {boolean} [options.trace=false] - whether to trace the evaluation\n   * @returns {string} - the evaluated script\n   */\n  static evaluate(script, context, options = {}) {\n    return new _RiScript(options).evaluate(script, context, options);\n  }\n  /**\n   * Creates a new RiScript instance\n   * @param {object} [options] - options for the object\n   * @param {object} [options.RiTa] - optionals RiTa object to use in transforms\n   * @param {number} [options.compatibility] - the RiTa compatibility level\n   */\n  constructor(options = {}) {\n    this.Escaped = void 0;\n    this.Symbols = void 0;\n    this.visitor = void 0;\n    this.v2Compatible = options.compatibility === 2;\n    const { Constants, tokens } = getTokens(this.v2Compatible);\n    ({ Escaped: this.Escaped, Symbols: this.Symbols } = Constants);\n    this.pendingGateRe = new RegExp(`${this.Escaped.PENDING_GATE}([0-9]{9,11})`, \"g\");\n    this.textTypes = TextTypes;\n    this.RiTa = options.RiTa || {\n      VERSION: 0,\n      randi: (k) => Math.floor(Math.random() * k)\n    };\n    this.transforms = this._createTransforms();\n    this.regex = this._createRegexes(tokens);\n    this.lexer = new chevrotain__WEBPACK_IMPORTED_MODULE_2__.Lexer(tokens);\n    this.parser = new RiScriptParser(tokens, TextTypes);\n  }\n  /** @private */\n  lex(opts) {\n    if (!opts.input)\n      throw Error(\"no input\");\n    const lexResult = this.lexer.tokenize(opts.input);\n    if (lexResult.errors.length) {\n      console.error(\"Input: \" + opts.input + \"\\n\", lexResult.errors[0].message);\n      throw Error(\"[LEXING] \" + lexResult.errors[0].message);\n    }\n    if (opts.traceLex)\n      this._printTokens(lexResult.tokens);\n    opts.tokens = lexResult.tokens;\n  }\n  /** @private */\n  parse(opts) {\n    opts.cst = this.parser.parse(opts);\n  }\n  /** @private */\n  visit(opts) {\n    return this.visitor.start(opts);\n  }\n  /**\n   * Evaluates the input script via the RiScript parser\n   * @param {string} script - the script to evaluate\n   * @param {object} [context] - the context (or world-state) to evaluate in\n   * @param {object} [options] - options for the evaluation\n   * @returns {string}\n   */\n  evaluate(script, context, options) {\n    if (typeof script !== \"string\") {\n      throw Error(\"evaluate() expects a string, got \" + typeof script);\n    }\n    if (typeof options !== \"object\") {\n      options = {};\n    }\n    options.input = script;\n    options.visitor = new RiScriptVisitor(this, context);\n    return this._evaluate(options);\n  }\n  /** @private */\n  lexParseVisit(opts = {}) {\n    this.lex(opts);\n    this.parse(opts);\n    return this.visit(opts);\n  }\n  /**\n   * Add a transform function to this instance\n   * @param {string} name - the name of the transform\n   * @param {function} def - the transform function\n   * @returns {RiScript} this instance\n   */\n  addTransform(name, def) {\n    this.transforms[name] = def;\n    return this;\n  }\n  /**\n   * Returns the names of all current transforms\n   * @returns {string[]} the names of the transforms\n   */\n  getTransforms() {\n    return Object.keys(this.transforms);\n  }\n  /**\n   * Removes a transform function from this instance\n   * @param {string} name of transform to remove\n   * @returns {RiScript} this instance\n   */\n  removeTransform(name) {\n    delete this.transforms[name];\n    return this;\n  }\n  ///////////////////////////////////// End API //////////////////////////////////////\n  /**\n   * Private version of evaluate taking all arguments in the options object\n   * @param {object} options - options for the evaluation\n   * @param {string} options.input - the script to evaluate\n   * @param {object} options.visitor - the visitor to use for the evaluation\n   * @param {boolean} [options.trace] - whether to trace the evaluation\n   * @param {boolean} [options.onepass] - whether to only do one pass\n   * @param {boolean} [options.silent] - whether to suppress warnings\n   * @returns {string} - the evaluated script's output text\n   * @package\n   */\n  _evaluate(options) {\n    const { input, visitor, trace, onepass, silent } = options;\n    if (!input)\n      throw Error(\"no input\");\n    if (!visitor)\n      throw Error(\"no visitor\");\n    let last, endingBreak = this.regex.EndingBreak.test(input);\n    let expr = this._preParse(input, options);\n    if (!expr)\n      return \"\";\n    if (!options.visitor)\n      throw Error(\"no visitor\");\n    this.visitor = options.visitor;\n    delete options.visitor;\n    if (trace) {\n      console.log(`\nInput:  '${escapeText2(input)}' ctx=${visitor.lookupsToString()}`);\n      if (input !== expr) {\n        console.log(`Parsed: '${escapeText2(expr)}'`);\n      }\n    }\n    for (let i = 1; expr !== last && i <= 10; i++) {\n      last = expr;\n      if (trace)\n        console.log(\"-\".repeat(20) + \" Pass#\" + i + \" \" + \"-\".repeat(20));\n      options.input = expr;\n      expr = this.lexParseVisit(options) ?? \"\";\n      if (trace) {\n        console.log(`Result(${i}) -> \"${escapeText2(expr || \"\")}\" ctx=${this.visitor.lookupsToString()}`);\n      }\n      if (onepass || !this.isParseable(expr))\n        break;\n    }\n    if (!silent && !this.RiTa.SILENT) {\n      if (this.regex.ValidSymbol.test(expr.replace(HtmlEntities, \"\"))) {\n        console.warn('[WARN] Unresolved symbol(s) in \"' + expr.replace(/\\n/g, \"\\\\n\") + '\" ');\n      }\n    }\n    return this._postParse(expr, options) + (endingBreak ? \"\\n\" : \"\");\n  }\n  /** @private */\n  _printTokens(tokens) {\n    let s = tokens.reduce((str, t) => {\n      let { name } = t.tokenType;\n      let tag = name;\n      if (tag === \"TEXT\")\n        tag = escapeText2(t.image, true);\n      if (tag === \"Symbol\")\n        tag = \"sym(\" + t.image + \")\";\n      if (tag === \"TX\")\n        tag = \"tx(\" + t.image + \")\";\n      return str + tag + \", \";\n    }, \"\").slice(0, -2);\n    console.log(\"\\nTokens: [ \" + s + \" ]\\n\");\n  }\n  /** @private */\n  _preParse(script, opts) {\n    if (typeof script !== \"string\")\n      return \"\";\n    const $ = this.Symbols;\n    let input = script;\n    if (!this.v2Compatible) {\n      input = input.replace(this.regex.ParenthesizedWeights, \"^$1^\");\n    }\n    let matches = input.match(this.regex.MarkdownLinks);\n    matches && matches.forEach((m) => input = input.replace(m, escapeMarkdownLink(m)));\n    input = input.replace(this.regex.MultiLineComments, \"\");\n    input = input.replace(this.regex.SingleLineComments, \"\");\n    input = input.replace(this.regex.Continue, \"\");\n    input = slashEscToEntities(input);\n    let result = \"\";\n    let lines = input.split(this.regex.LineBreaks);\n    for (let i = 0; i < lines.length; i++) {\n      if (this.regex.RawAssign.test(lines[i])) {\n        let eqIdx = lines[i].indexOf(\"=\");\n        if (eqIdx < 0)\n          throw Error(\"invalid state: no assigment: \" + lines[i]);\n        let lhs = lines[i].substring(0, eqIdx), rhs = lines[i].substring(eqIdx + 1);\n        let opens = charCount(rhs, $.OPEN_CHOICE);\n        let closes = charCount(rhs, $.CLOSE_CHOICE);\n        while (opens > closes) {\n          let line = lines[++i];\n          rhs += \"\\n\" + line;\n          opens += charCount(line, $.OPEN_CHOICE);\n          closes += charCount(line, $.CLOSE_CHOICE);\n        }\n        result += $.OPEN_SILENT + (lhs + \"=\" + rhs) + $.CLOSE_SILENT;\n      } else {\n        result += lines[i];\n        if (i < lines.length - 1)\n          result += \"\\n\";\n      }\n    }\n    return result;\n  }\n  /**\n   * Creates a new RiQuery object from the raw query string\n   * @package \n   */\n  createQuery(rawQuery, opts) {\n    return new RiQuery(this, rawQuery, opts);\n  }\n  /** @private */\n  _postParse(input, opts) {\n    if (typeof input !== \"string\")\n      return \"\";\n    let decoded = decode(input);\n    let result = decoded.replace(this.regex.Whitespace, \" \").replace(this.regex.EndingBreak, \"\");\n    let gates = [...result.matchAll(this.pendingGateRe)];\n    if (opts.trace && gates.length) {\n      console.log(\"-\".repeat(20) + \" pGates \" + \"-\".repeat(20));\n    }\n    this.visitor.order = 0;\n    gates.forEach((g) => {\n      if (!g || !g[0] || !g[1])\n        throw Error(\"bad gate: \" + g);\n      let deferredGate = this.visitor.pendingGates[g[1]];\n      if (!deferredGate)\n        throw Error(\"no deferredGate: \" + g[1]);\n      let { deferredContext, operands, gateText } = deferredGate;\n      if (!operands.length)\n        throw Error(\"no operands\");\n      let reject = this.visitor.choice(deferredContext, { forceReject: true });\n      result = result.replace(g[0], reject);\n      if (opts.trace)\n        console.log(\"Unresolved gate: '\" + gateText + \"' {reject}\");\n    });\n    if (opts.trace)\n      console.log(`\nFinal: '${result}'`);\n    if (!opts.preserveLookups) {\n      this.visitor.statics = void 0;\n      this.visitor.dynamics = void 0;\n    }\n    return result;\n  }\n  /**\n   * Parses a mingo query into JSON format\n   * @package\n   */\n  parseJSOL(text) {\n    const unescapeRegexProperty = (text2) => {\n      const RegexEscape = Util.RegexEscape;\n      let res = text2;\n      if (typeof text2 === \"string\" && text2.startsWith(RegexEscape) && text2.endsWith(RegexEscape)) {\n        let parts = text2.split(RegexEscape);\n        if (parts.length !== 4)\n          throw Error(\"invalid regex in unescape\");\n        res = new RegExp(parts[1], parts[2]);\n      }\n      return res;\n    };\n    let escaped = escapeJSONRegex(text).replace(this.regex.JSOLIdent, '\"$1\":').replace(/'/g, '\"');\n    let result = JSON.parse(escaped), urp = unescapeRegexProperty;\n    Object.keys(result).forEach((k) => result[k] = urp(result[k]));\n    return result;\n  }\n  /**\n   * True if input contains parseable script\n   * @private\n   */\n  isParseable(s) {\n    let result = true;\n    if (typeof s === \"number\") {\n      s = s.toString();\n    }\n    if (typeof s === \"string\") {\n      result = this.regex.Special.test(s) || s.includes(this.Symbols.PENDING_GATE);\n    }\n    return result;\n  }\n  // ========================= statics ===============================\n  /**\n   * Default transform that pluralizes a string (uses RiTa if available for phonemes)\n   * @param {string} s - the string to transform\n   * @param {object} [pluralizer] - custom pluralizer with pluralize() function\n   * @returns {string} the transformed string\n   * @private\n   */\n  static pluralize(s, pluralizer) {\n    if (!pluralizer?.pluralize) {\n      if (!_RiScript.RiTaWarnings.plurals && !_RiScript.RiTaWarnings.silent) {\n        _RiScript.RiTaWarnings.plurals = true;\n        console.warn(\"[WARN] Install RiTa for proper pluralization\");\n      }\n      return s.endsWith(\"s\") ? s : s + \"s\";\n    }\n    return pluralizer.pluralize(s);\n  }\n  /**\n   * Default transform that adds an article (uses RiTa if available for phonemes)\n   * @param {string} s - the string to transform\n   * @param {object} [phonemeAnalyzer] - custom phoneme analyzer with phones() function\n   * @returns {string} the transformed string\n   * @private\n   */\n  static articlize(s, phonemeAnalyzer) {\n    if (!s || !s.length)\n      return \"\";\n    let first = s.split(/\\s+/)[0];\n    if (!phonemeAnalyzer?.phones) {\n      if (!_RiScript.RiTaWarnings.phones && !_RiScript.RiTaWarnings.silent) {\n        console.warn(\"[WARN] Install RiTa for proper phonemes\");\n        _RiScript.RiTaWarnings.phones = true;\n      }\n      return (/^[aeiou].*/i.test(first) ? \"an \" : \"a \") + s;\n    }\n    let phones = phonemeAnalyzer.phones(first, { silent: true });\n    return (phones?.length && Vowels.test(phones[0]) ? \"an \" : \"a \") + s;\n  }\n  /**\n   * Default transform that uppercases the first character of the string\n   * @param {string} s - the string to transform\n   * @returns {string} the transformed string\n   * @private\n   */\n  static capitalize(s) {\n    return s ? s[0].toUpperCase() + s.substring(1) : \"\";\n  }\n  /**\n   * Default transform that capitalizes the string\n   * @param {string} s - the string to transform\n   * @returns {string} the transformed string\n   * @private\n   */\n  static uppercase(s) {\n    return s ? s.toUpperCase() : \"\";\n  }\n  /**\n   * Default transform that wraps the string in (smart) quotes.\n   * @param {string} s - the string to transform\n   * @returns {string} the transformed string\n   * @private\n   */\n  static quotify(s) {\n    return \"&#8220;\" + (s || \"\") + \"&#8221;\";\n  }\n  /**\n   * Default no-op transform\n   * @param {string} s - the string to transform\n   * @returns {string} the transformed string\n   * @private\n   */\n  static identity(s) {\n    return s;\n  }\n  // ========================= helpers ===============================\n  /** @private */\n  _createRegexes(tokens) {\n    const Esc = this.Escaped;\n    const open = Esc.OPEN_CHOICE;\n    const close = Esc.CLOSE_CHOICE;\n    const anysym = Esc.STATIC + Esc.DYNAMIC;\n    return {\n      LineBreaks: /\\r?\\n/,\n      EndingBreak: /\\r?\\n$/,\n      NonGateAtSigns: /([^}])@(?!{)/,\n      AnySymbol: new RegExp(`[${anysym}]`),\n      ParenthesizedWeights: /\\(\\s*(\\d+)\\s*\\)/g,\n      // TODO: change for negative weights\n      MultiLineComments: /\\/\\*[^]*?(\\r?\\n)?\\//g,\n      SingleLineComments: /\\/\\/[^\\n]+(\\r?\\n|$)/g,\n      MarkdownLinks: /\\[([^\\]]+)\\]\\(([^)\"]+)(?: \\\"([^\\\"]+)\\\")?\\)/g,\n      RawAssign: new RegExp(`^[${anysym}][A-Za-z_0-9][A-Za-z_0-9]*\\\\s*=`),\n      JSOLIdent: new RegExp(`([${anysym}]?[A-Za-z_0-9][A-Za-z_0-9]*)\\\\s*:`, \"g\"),\n      ChoiceWrap: new RegExp(\"^\" + open + \"[^\" + open + close + \"]*\" + close + \"$\"),\n      ValidSymbol: new RegExp(\"(\" + Esc.DYNAMIC + \"|\" + Esc.STATIC + \"[A-Za-z_0-9])[A-Za-z_0-9]*\"),\n      Entity: tokens.filter((t) => t.name === \"Entity\")[0].PATTERN,\n      StaticSymbol: new RegExp(Esc.STATIC + \"[A-Za-z_0-9][A-Za-z_0-9]*\"),\n      Special: new RegExp(`[${Esc.SPECIAL.replace(\"&\", \"\")}]`),\n      Continue: new RegExp(Esc.CONTINUATION + \"\\\\r?\\\\n\", \"g\"),\n      Whitespace: /[\\u00a0\\u2000-\\u200b\\u2028-\\u2029\\u3000]+/g\n    };\n  }\n  /** @private */\n  _createTransforms() {\n    let transforms = {\n      quotify: (w) => _RiScript.quotify(w),\n      pluralize: (w) => _RiScript.pluralize(w, this.RiTa),\n      articlize: (w) => _RiScript.articlize(w, this.RiTa),\n      capitalize: (w) => _RiScript.capitalize(w),\n      uppercase: (w) => _RiScript.uppercase(w),\n      norepeat: (w) => _RiScript.identity(w)\n    };\n    transforms.art = transforms.articlize;\n    transforms.nr = transforms.norepeat;\n    transforms.cap = transforms.capitalize;\n    transforms.uc = transforms.uppercase;\n    transforms.qq = transforms.quotify;\n    transforms.s = transforms.pluralize;\n    transforms.ucf = transforms.capitalize;\n    return transforms;\n  }\n};\n/** @type {string} */\n__publicField(_RiScript, \"VERSION\", \"1.1.1\");\n/** @type {typeof RiQuery} */\n__publicField(_RiScript, \"Query\", RiQuery);\n/** @type {Object.<string, boolean>} */\n__publicField(_RiScript, \"RiTaWarnings\", { plurals: false, phones: false, silent: false });\nvar RiScript = _RiScript;\nfunction charCount(str, c) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === c)\n      count++;\n  }\n  return count;\n}\nRiScript.Visitor = RiScriptVisitor;\nRiScript.Util = Util;\n\n//# sourceMappingURL=riscript.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/riscript/dist/riscript.js\n");

/***/ })

};
;